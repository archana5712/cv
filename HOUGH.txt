HOUGH LINE TRANSFORMATION 

IDLE :

import cv2
import numpy as np
import matplotlib.pyplot as plt

# Load the image
img = cv2.imread(r"C:\Users\HP\OneDrive\Pictures\Chris.jpg")

# Convert to grayscale
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Apply edge detection
edges = cv2.Canny(gray, 100, 200, apertureSize=3)

# Detect lines using Hough Line Transform
lines = cv2.HoughLinesP(edges, 1, np.pi / 180, threshold=5, minLineLength=7, maxLineGap=1)

# Copy the original image to draw the lines
img_lines = img.copy()

# Draw lines on the image
if lines is not None:
    print(f"Number of lines detected: {len(lines)}")
    for line in lines:
        x1, y1, x2, y2 = line[0]
        print(f"Line coordinates: ({x1}, {y1}) to ({x2}, {y2})")
        cv2.line(img_lines, (x1, y1), (x2, y2), (0, 255, 0), 5)  # Green lines with thickness of 2
else:
    print("No lines detected.")

# Plot original image and image with lines
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(cv2.cvtColor(img_lines, cv2.COLOR_BGR2RGB))
plt.title('Detected Lines')
plt.axis('off')

plt.tight_layout()
plt.show()


MATLAB:

% Read the image
image = imread('C:\Users\HP\OneDrive\Pictures\Chris.jpg');
gray = rgb2gray(image);

% Apply edge detection
edges = edge(gray, 'Canny');

% Perform Hough transform
[H, T, R] = hough(edges);

% Find the peaks in the Hough transform matrix
P = houghpeaks(H, 5, 'threshold', ceil(0.3 * max(H(:))));

% Find lines and plot them
lines = houghlines(edges, T, R, P, 'FillGap', 5, 'MinLength', 7);

% Display the original image
figure, imshow(image), hold on

% Plot detected lines on the image
for k = 1:length(lines)
   xy = [lines(k).point1; lines(k).point2];
   plot(xy(:,1), xy(:,2), 'LineWidth', 2, 'Color', 'red');
   
   % Plot start and end points
   plot(xy(1,1), xy(1,2), 'x', 'LineWidth', 2, 'Color', 'yellow');
   plot(xy(2,1), xy(2,2), 'x', 'LineWidth', 2, 'Color', 'green');
end

hold off

GOOGLE COLAB:

import cv2
import numpy as np
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()

image_path = next(iter(uploaded))
image = cv2.imread(image_path)
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

# Apply edge detection
edges = cv2.Canny(gray, 100, 200, apertureSize=3)

# Detect lines using Hough Line Transform
lines = cv2.HoughLinesP(edges, 1, np.pi / 180, threshold=5, minLineLength=7, maxLineGap=1)

# Copy the original image to draw the lines
image_lines = image.copy()

# Draw lines on the image
if lines is not None:
    print(f"Number of lines detected: {len(lines)}")
    for line in lines:
        x1, y1, x2, y2 = line[0]
        print(f"Line coordinates: ({x1}, {y1}) to ({x2}, {y2})")
        cv2.line(image_lines, (x1, y1), (x2, y2), (0, 255, 0), 5)  # Green lines with thickness of 2
else:
    print("No lines detected.")

# Plot original image and image with lines
plt.figure(figsize=(12, 6))

plt.subplot(1, 2, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title('Original Image')
plt.axis('off')

plt.subplot(1, 2, 2)
plt.imshow(cv2.cvtColor(image_lines, cv2.COLOR_BGR2RGB))
plt.title('Detected Lines')
plt.axis('off')

plt.tight_layout()
plt.show()

